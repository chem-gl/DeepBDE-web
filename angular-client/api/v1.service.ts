/**
 * DeepBDE API
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext 
        }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

// @ts-ignore
import { APIResponseDownloadReportResponseData } from '../model/aPIResponseDownloadReportResponseData';
// @ts-ignore
import { APIResponseFragmentResponseData } from '../model/aPIResponseFragmentResponseData';
// @ts-ignore
import { APIResponseInferAllResponseData } from '../model/aPIResponseInferAllResponseData';
// @ts-ignore
import { APIResponseMoleculeInfoResponseData } from '../model/aPIResponseMoleculeInfoResponseData';
// @ts-ignore
import { APIResponseNoneType } from '../model/aPIResponseNoneType';
// @ts-ignore
import { APIResponsePredictCheckResponseData } from '../model/aPIResponsePredictCheckResponseData';
// @ts-ignore
import { APIResponsePredictMultipleResponseData } from '../model/aPIResponsePredictMultipleResponseData';
// @ts-ignore
import { APIResponsePredictSingleResponseData } from '../model/aPIResponsePredictSingleResponseData';
// @ts-ignore
import { BDEEvaluateRequest } from '../model/bDEEvaluateRequest';
// @ts-ignore
import { DownloadReportRequest } from '../model/downloadReportRequest';
// @ts-ignore
import { InferAllRequest } from '../model/inferAllRequest';
// @ts-ignore
import { MoleculeInfoRequest } from '../model/moleculeInfoRequest';
// @ts-ignore
import { MoleculeSmileCanonicalRequest } from '../model/moleculeSmileCanonicalRequest';
// @ts-ignore
import { PredictCheckRequest } from '../model/predictCheckRequest';
// @ts-ignore
import { PredictMultipleRequest } from '../model/predictMultipleRequest';
// @ts-ignore
import { PredictSingleRequest } from '../model/predictSingleRequest';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';
import { BaseService } from '../api.base.service';



@Injectable({
  providedIn: 'root'
})
export class V1Service extends BaseService {

    constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string|string[], @Optional() configuration?: Configuration) {
        super(basePath, configuration);
    }

    /**
     *          Genera fragmentos moleculares en formato SMILES o XYZ.         Generates molecular fragments in SMILES or XYZ format.         
     * @param bDEEvaluateRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v1BDEEvaluateCreate(bDEEvaluateRequest: BDEEvaluateRequest, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<APIResponseFragmentResponseData>;
    public v1BDEEvaluateCreate(bDEEvaluateRequest: BDEEvaluateRequest, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<APIResponseFragmentResponseData>>;
    public v1BDEEvaluateCreate(bDEEvaluateRequest: BDEEvaluateRequest, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<APIResponseFragmentResponseData>>;
    public v1BDEEvaluateCreate(bDEEvaluateRequest: BDEEvaluateRequest, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        if (bDEEvaluateRequest === null || bDEEvaluateRequest === undefined) {
            throw new Error('Required parameter bDEEvaluateRequest was null or undefined when calling v1BDEEvaluateCreate.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (basicAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('basicAuth', 'Authorization', localVarHeaders, 'Basic ');

        // authentication (cookieAuth) required

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/x-www-form-urlencoded',
            'multipart/form-data'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/v1/BDEEvaluate/`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<APIResponseFragmentResponseData>('post', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: bDEEvaluateRequest,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *          Genera y descarga un informe txt con los resultados de la predicción para la molécula          Generates and downloads a TXT report with the prediction results for the indicated molecule          
     * @param downloadReportRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v1DownloadReportCreate(downloadReportRequest: DownloadReportRequest, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<APIResponseDownloadReportResponseData>;
    public v1DownloadReportCreate(downloadReportRequest: DownloadReportRequest, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<APIResponseDownloadReportResponseData>>;
    public v1DownloadReportCreate(downloadReportRequest: DownloadReportRequest, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<APIResponseDownloadReportResponseData>>;
    public v1DownloadReportCreate(downloadReportRequest: DownloadReportRequest, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        if (downloadReportRequest === null || downloadReportRequest === undefined) {
            throw new Error('Required parameter downloadReportRequest was null or undefined when calling v1DownloadReportCreate.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (basicAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('basicAuth', 'Authorization', localVarHeaders, 'Basic ');

        // authentication (cookieAuth) required

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/x-www-form-urlencoded',
            'multipart/form-data'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/v1/download_report/`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<APIResponseDownloadReportResponseData>('post', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: downloadReportRequest,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *          Predice las energías de disociación para todos los enlaces simples de la molécula dada.         Predicts the dissociation energies for all single bonds of the given molecule.         
     * @param inferAllRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v1InferAllCreate(inferAllRequest: InferAllRequest, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<APIResponseInferAllResponseData>;
    public v1InferAllCreate(inferAllRequest: InferAllRequest, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<APIResponseInferAllResponseData>>;
    public v1InferAllCreate(inferAllRequest: InferAllRequest, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<APIResponseInferAllResponseData>>;
    public v1InferAllCreate(inferAllRequest: InferAllRequest, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        if (inferAllRequest === null || inferAllRequest === undefined) {
            throw new Error('Required parameter inferAllRequest was null or undefined when calling v1InferAllCreate.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (basicAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('basicAuth', 'Authorization', localVarHeaders, 'Basic ');

        // authentication (cookieAuth) required

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/x-www-form-urlencoded',
            'multipart/form-data'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/v1/infer/all/`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<APIResponseInferAllResponseData>('post', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: inferAllRequest,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *          Verifica productos generados por la escisión de un enlace y predice la BDE.         Verifies products generated by the cleavage of a bond and predicts the BDE.         
     * @param predictCheckRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v1PredictCheckCreate(predictCheckRequest: PredictCheckRequest, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<APIResponsePredictCheckResponseData>;
    public v1PredictCheckCreate(predictCheckRequest: PredictCheckRequest, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<APIResponsePredictCheckResponseData>>;
    public v1PredictCheckCreate(predictCheckRequest: PredictCheckRequest, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<APIResponsePredictCheckResponseData>>;
    public v1PredictCheckCreate(predictCheckRequest: PredictCheckRequest, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        if (predictCheckRequest === null || predictCheckRequest === undefined) {
            throw new Error('Required parameter predictCheckRequest was null or undefined when calling v1PredictCheckCreate.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (basicAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('basicAuth', 'Authorization', localVarHeaders, 'Basic ');

        // authentication (cookieAuth) required

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/x-www-form-urlencoded',
            'multipart/form-data'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/v1/predict/check/`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<APIResponsePredictCheckResponseData>('post', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: predictCheckRequest,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *          Devuelve información enriquecida de la molécula: SMILES canónico, imagen SVG, metadatos de canvas, posiciones de átomos y enlaces, id único.                  Returns enriched information about the molecule: canonical SMILES, SVG image, canvas metadata, atom and bond positions, unique ID.         
     * @param moleculeInfoRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v1PredictInfoCreate(moleculeInfoRequest: MoleculeInfoRequest, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<APIResponseMoleculeInfoResponseData>;
    public v1PredictInfoCreate(moleculeInfoRequest: MoleculeInfoRequest, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<APIResponseMoleculeInfoResponseData>>;
    public v1PredictInfoCreate(moleculeInfoRequest: MoleculeInfoRequest, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<APIResponseMoleculeInfoResponseData>>;
    public v1PredictInfoCreate(moleculeInfoRequest: MoleculeInfoRequest, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        if (moleculeInfoRequest === null || moleculeInfoRequest === undefined) {
            throw new Error('Required parameter moleculeInfoRequest was null or undefined when calling v1PredictInfoCreate.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (basicAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('basicAuth', 'Authorization', localVarHeaders, 'Basic ');

        // authentication (cookieAuth) required

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/x-www-form-urlencoded',
            'multipart/form-data'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/v1/predict/info/`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<APIResponseMoleculeInfoResponseData>('post', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: moleculeInfoRequest,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *                  Devuelve el SMILES canónico de una molécula con hidrógenos explícitos.         Returns the canonical SMILES of a molecule with explicit hydrogens.         
     * @param moleculeSmileCanonicalRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v1PredictInfoSmileCanonicalCreate(moleculeSmileCanonicalRequest: MoleculeSmileCanonicalRequest, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<APIResponseMoleculeInfoResponseData>;
    public v1PredictInfoSmileCanonicalCreate(moleculeSmileCanonicalRequest: MoleculeSmileCanonicalRequest, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<APIResponseMoleculeInfoResponseData>>;
    public v1PredictInfoSmileCanonicalCreate(moleculeSmileCanonicalRequest: MoleculeSmileCanonicalRequest, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<APIResponseMoleculeInfoResponseData>>;
    public v1PredictInfoSmileCanonicalCreate(moleculeSmileCanonicalRequest: MoleculeSmileCanonicalRequest, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        if (moleculeSmileCanonicalRequest === null || moleculeSmileCanonicalRequest === undefined) {
            throw new Error('Required parameter moleculeSmileCanonicalRequest was null or undefined when calling v1PredictInfoSmileCanonicalCreate.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (basicAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('basicAuth', 'Authorization', localVarHeaders, 'Basic ');

        // authentication (cookieAuth) required

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/x-www-form-urlencoded',
            'multipart/form-data'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/v1/predict/info-smile-canonical/`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<APIResponseMoleculeInfoResponseData>('post', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: moleculeSmileCanonicalRequest,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *          Predice las energías de disociación para varios enlaces de la molécula.         Predicts the dissociation energies for multiple bonds of the molecule.         
     * @param predictMultipleRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v1PredictMultipleCreate(predictMultipleRequest: PredictMultipleRequest, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<APIResponsePredictMultipleResponseData>;
    public v1PredictMultipleCreate(predictMultipleRequest: PredictMultipleRequest, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<APIResponsePredictMultipleResponseData>>;
    public v1PredictMultipleCreate(predictMultipleRequest: PredictMultipleRequest, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<APIResponsePredictMultipleResponseData>>;
    public v1PredictMultipleCreate(predictMultipleRequest: PredictMultipleRequest, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        if (predictMultipleRequest === null || predictMultipleRequest === undefined) {
            throw new Error('Required parameter predictMultipleRequest was null or undefined when calling v1PredictMultipleCreate.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (basicAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('basicAuth', 'Authorization', localVarHeaders, 'Basic ');

        // authentication (cookieAuth) required

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/x-www-form-urlencoded',
            'multipart/form-data'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/v1/predict/multiple/`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<APIResponsePredictMultipleResponseData>('post', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: predictMultipleRequest,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *          Predice la energía de disociación para un enlace específico de la molécula.                  Predicts the dissociation energy for a specific bond of the molecule.         
     * @param predictSingleRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v1PredictSingleCreate(predictSingleRequest: PredictSingleRequest, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<APIResponsePredictSingleResponseData>;
    public v1PredictSingleCreate(predictSingleRequest: PredictSingleRequest, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<APIResponsePredictSingleResponseData>>;
    public v1PredictSingleCreate(predictSingleRequest: PredictSingleRequest, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<APIResponsePredictSingleResponseData>>;
    public v1PredictSingleCreate(predictSingleRequest: PredictSingleRequest, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        if (predictSingleRequest === null || predictSingleRequest === undefined) {
            throw new Error('Required parameter predictSingleRequest was null or undefined when calling v1PredictSingleCreate.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (basicAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('basicAuth', 'Authorization', localVarHeaders, 'Basic ');

        // authentication (cookieAuth) required

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/x-www-form-urlencoded',
            'multipart/form-data'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/v1/predict/single/`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<APIResponsePredictSingleResponseData>('post', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: predictSingleRequest,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
